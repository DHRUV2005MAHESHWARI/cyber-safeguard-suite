
import React, { useState } from 'react';
import { Shield, AlertTriangle, Bug, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import CardContainer from '@/components/CardContainer';
import StatusBadge from '@/components/StatusBadge';
import AnimatedIcon from '@/components/AnimatedIcon';
import { Progress } from '@/components/ui/progress';
import { SecurityStatus } from '@/context/SecurityContext';
import { toast } from 'sonner';

interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: SecurityStatus;
  category: 'os' | 'software' | 'network' | 'configuration';
  fixAction?: string;
}

const VulnerabilityScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanComplete, setScanComplete] = useState(false);
  
  // Simulate a vulnerability scan
  const startScan = () => {
    setIsScanning(true);
    setProgress(0);
    setScanComplete(false);
    setVulnerabilities([]);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setProgress(prev => {
        const newProgress = prev + Math.floor(Math.random() * 5) + 1;
        if (newProgress >= 100) {
          clearInterval(interval);
          completeScan();
          return 100;
        }
        return newProgress;
      });
    }, 200);
  };
  
  // Complete the scan and generate mock results
  const completeScan = () => {
    // Mock vulnerabilities found during scan
    const mockVulnerabilities: Vulnerability[] = [
      {
        id: 'vuln-1',
        name: 'Outdated Operating System',
        description: 'Your operating system is missing important security updates that fix known vulnerabilities.',
        severity: 'warning',
        category: 'os',
        fixAction: 'Update your operating system to the latest version.'
      },
      {
        id: 'vuln-2',
        name: 'Insecure Network Configuration',
        description: 'Your network settings allow potentially dangerous incoming connections on several ports.',
        severity: 'critical',
        category: 'network',
        fixAction: 'Configure your firewall to block unnecessary incoming connections.'
      },
      {
        id: 'vuln-3',
        name: 'Outdated Web Browser',
        description: 'Your web browser version has known security vulnerabilities that could be exploited.',
        severity: 'warning',
        category: 'software',
        fixAction: 'Update your web browser to the latest version.'
      },
      {
        id: 'vuln-4',
        name: 'Unnecessary Services Running',
        description: 'Multiple unnecessary services are running, increasing your attack surface.',
        severity: 'warning',
        category: 'configuration',
        fixAction: 'Disable or uninstall unused services and applications.'
      },
    ];
    
    // Randomly select 2-4 vulnerabilities to show
    const selectedVulnerabilities: Vulnerability[] = [];
    const shuffled = [...mockVulnerabilities].sort(() => 0.5 - Math.random());
    const numToSelect = Math.floor(Math.random() * 3) + 2; // 2-4
    
    for (let i = 0; i < Math.min(numToSelect, shuffled.length); i++) {
      selectedVulnerabilities.push(shuffled[i]);
    }
    
    setTimeout(() => {
      setVulnerabilities(selectedVulnerabilities);
      setIsScanning(false);
      setScanComplete(true);
      toast.success('Vulnerability scan complete');
    }, 500);
  };
  
  // Fix a vulnerability
  const fixVulnerability = (id: string) => {
    setVulnerabilities(prev => prev.filter(vuln => vuln.id !== id));
    toast.success('Vulnerability resolved');
  };
  
  // Get severity count
  const getSeverityCount = (severity: SecurityStatus) => {
    return vulnerabilities.filter(v => v.severity === severity).length;
  };
  
  // Get security status based on vulnerabilities
  const getSecurityStatus = (): SecurityStatus => {
    if (getSeverityCount('critical') > 0) return 'critical';
    if (getSeverityCount('warning') > 0) return 'warning';
    return 'secure';
  };
  
  return (
    <CardContainer>
      <div className="p-6 pb-4 flex justify-between items-center border-b">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Bug className="w-5 h-5 text-primary" />
          Vulnerability Scanner
        </h3>
        <Button 
          onClick={startScan} 
          disabled={isScanning}
          size="sm"
          className="gap-2"
        >
          {isScanning ? (
            <>
              <RefreshCw className="w-4 h-4 animate-spin" />
              Scanning...
            </>
          ) : (
            <>
              <Shield className="w-4 h-4" />
              {scanComplete ? 'Scan Again' : 'Start Scan'}
            </>
          )}
        </Button>
      </div>
      
      {isScanning ? (
        <div className="p-8 text-center">
          <AnimatedIcon 
            icon={RefreshCw} 
            size={48}
            animation="spin"
            className="mx-auto mb-4 text-primary p-4"
          />
          <h4 className="text-lg font-semibold mb-2">Scanning System</h4>
          <p className="text-muted-foreground mb-6">
            Checking for vulnerabilities in your system...
          </p>
          <div className="max-w-md mx-auto space-y-2">
            <div className="flex justify-between text-sm mb-1">
              <span>Scan progress</span>
              <span>{progress}%</span>
            </div>
            <Progress 
              value={progress} 
              className="h-2"
              indicatorClassName="bg-primary"
            />
          </div>
        </div>
      ) : vulnerabilities.length > 0 ? (
        <div className="divide-y">
          <div className="p-4 bg-muted/30">
            <div className="flex flex-wrap gap-3 justify-between items-center">
              <div className="flex items-center gap-3">
                <StatusBadge status={getSecurityStatus()} />
                <span className="text-sm">
                  {getSeverityCount('critical')} critical, {getSeverityCount('warning')} warnings
                </span>
              </div>
            </div>
          </div>
          
          {vulnerabilities.map((vuln) => (
            <div key={vuln.id} className="p-6 animate-fade-in">
              <div className="flex flex-col md:flex-row gap-4 justify-between">
                <div className="space-y-1.5">
                  <div className="flex items-center gap-2">
                    {vuln.severity === 'critical' 
                      ? <AlertTriangle className="w-5 h-5 text-red-500" /> 
                      : <AlertTriangle className="w-5 h-5 text-amber-500" />}
                    <h4 className="font-semibold">{vuln.name}</h4>
                    <StatusBadge status={vuln.severity} />
                  </div>
                  <p className="text-muted-foreground text-sm">{vuln.description}</p>
                  {vuln.fixAction && (
                    <div className="text-sm flex items-start gap-2 pt-1">
                      <Shield className="w-4 h-4 text-primary mt-0.5 flex-shrink-0" />
                      <span>{vuln.fixAction}</span>
                    </div>
                  )}
                </div>
                <div className="flex-shrink-0">
                  <Button 
                    onClick={() => fixVulnerability(vuln.id)} 
                    size="sm" 
                    variant={vuln.severity === 'critical' ? 'default' : 'outline'}
                  >
                    Fix Issue
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : scanComplete ? (
        <div className="p-12 text-center">
          <AnimatedIcon 
            icon={Shield} 
            size={48}
            className="mx-auto mb-4 p-4 text-green-500"
          />
          <h4 className="text-lg font-semibold mb-2">All Clear!</h4>
          <p className="text-muted-foreground">
            No vulnerabilities were detected on your system.
          </p>
        </div>
      ) : (
        <div className="p-12 text-center">
          <Bug className="w-16 h-16 mx-auto mb-4 text-muted-foreground p-4 opacity-40" />
          <h4 className="text-lg font-semibold mb-2">Vulnerability Scan</h4>
          <p className="text-muted-foreground max-w-md mx-auto mb-6">
            Scan your system to detect security vulnerabilities and get recommendations to fix them.
          </p>
          <Button onClick={startScan} className="gap-2">
            <Shield className="w-4 h-4" />
            Start Scan
          </Button>
        </div>
      )}
    </CardContainer>
  );
};

export default VulnerabilityScanner;
